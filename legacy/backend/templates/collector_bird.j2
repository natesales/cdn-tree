define ASN = {{ asn }};

log syslog all;
router id 192.0.2.1;
protocol device {};

protocol direct {
  ipv4;
  ipv6;
}

protocol kernel {
  ipv4 {
    import none;
    export none;
  };
}

protocol kernel {
  ipv6 {
    import none;
    export none;
  };
}

define BOGONS_v4 = [
  0.0.0.0/0,              # Default route
  0.0.0.0/8{8,32},        # IANA - Local Identification
  10.0.0.0/8{8,32},       # RFC 1918 - Private Use
  100.64.0.0/10{10,32},   # RFC 6598 - Shared Address Space
  127.0.0.0/8{8,32},      # IANA - Loopback
  169.254.0.0/16{16,32},  # RFC 3927 - Link Local
  172.16.0.0/12{12,32},   # RFC 1918 - Private Use
  192.0.2.0/24{24,32},    # RFC 5737 - TEST-NET-1
  192.88.99.0/24{24,32},  # RFC 3068 - 6to4 prefix
  192.168.0.0/16{16,32},  # RFC 1918 - Private Use
  198.18.0.0/15{15,32},   # RFC 2544 - Network Interconnect Device Benchmark Testing
  198.51.100.0/24{24,32}, # RFC 5737 - TEST-NET-2
  203.0.113.0/24{24,32},  # RFC 5737 - TEST-NET-3
  224.0.0.0/3{3,32}       # RFC 5771 - Multicast (formerly Class D)
];

define BOGONS_v6 = [
  ::/0,                     # Default route
  ::/8{8,128},              # loopback, unspecified, v4-mapped
  64:ff9b::/96{96,128},     # RFC 6052 - IPv4-IPv6 Translation
  100::/8{8,128},           # RFC 6666 - reserved for Discard-Only Address Block
  200::/7{7,128},           # RFC 4048 - Reserved by IETF
  400::/6{6,128},           # RFC 4291 - Reserved by IETF
  800::/5{5,128},           # RFC 4291 - Reserved by IETF
  1000::/4{4,128},          # RFC 4291 - Reserved by IETF
  2001::/33{33,128},        # RFC 4380 - Teredo prefix
  2001:0:8000::/33{33,128}, # RFC 4380 - Teredo prefix
  2001:2::/48{48,128},      # RFC 5180 - Benchmarking
  2001:3::/32{32,128},      # RFC 7450 - Automatic Multicast Tunneling
  2001:10::/28{28,128},     # RFC 4843 - Deprecated ORCHID
  2001:20::/28{28,128},     # RFC 7343 - ORCHIDv2
  2001:db8::/32{32,128},    # RFC 3849 - NON-ROUTABLE range to be used for documentation purpose
  2002::/16{16,128},        # RFC 3068 - 6to4 prefix
  3ffe::/16{16,128},        # RFC 5156 - used for the 6bone but was returned
  4000::/3{3,128},          # RFC 4291 - Reserved by IETF
  5f00::/8{8,128},          # RFC 5156 - used for the 6bone but was returned
  6000::/3{3,128},          # RFC 4291 - Reserved by IETF
  8000::/3{3,128},          # RFC 4291 - Reserved by IETF
  a000::/3{3,128},          # RFC 4291 - Reserved by IETF
  c000::/3{3,128},          # RFC 4291 - Reserved by IETF
  e000::/4{4,128},          # RFC 4291 - Reserved by IETF
  f000::/5{5,128},          # RFC 4291 - Reserved by IETF
  f800::/6{6,128},          # RFC 4291 - Reserved by IETF
  fc00::/7{7,128},          # RFC 4193 - Unique Local Unicast
  fe80::/10{10,128},        # RFC 4291 - Link Local Unicast
  fec0::/10{10,128},        # RFC 4291 - Reserved by IETF
  ff00::/8{8,128}           # RFC 4291 - Multicast
];

define BOGON_ASNS = [
  0,                      # Reserved. RFC7607
  23456,                  # AS_TRANS. RFC6793
  64496..64511,           # Reserved for use in documentation and sample code. RFC5398
  64512..65534,           # Reserved for Private Use. RFC6996
  65535,                  # Reserved. RFC7300
  65536..65551,           # Reserved for use in documentation and sample code. RFC5398
  65552..131071,          # Reserved.
  4200000000..4294967294, # Reserved for Private Use. [RFC6996]
  4294967295              # Reserved. RFC7300
];

function _reject(string reason) {
  reject "REJECTED [", reason, "] pfx ", net, " session ", proto, " path ", bgp_path, " pathlen ", bgp_path.len, " origin ", bgp_path.last;
}

function external_import() {
  if (bgp_path ~ BOGON_ASNS) then _reject("bogon ASN in path");
  if (bgp_path.len > 100) then _reject("long AS_PATH");

  if (net.type = NET_IP4) then {
    if (net.len > 24 || net.len < 8) then _reject("out of bounds (24 > len > 8)");
    if (net ~ BOGONS_v4) then _reject("bogon prefix");
  }

  if (net.type = NET_IP6) then {
    if (net.len > 48 || net.len < 12) then _reject("out of bounds (48 > len > 12)");
    if (net ~ BOGONS_v6) then _reject("bogon prefix");
  }

  bgp_community.add((ASN,800));
  accept;
}

protocol bgp RIPE_RISv4 {
  local as ASN;
  neighbor 193.0.4.28 as 12654;
  multihop 255;
  ipv4 {
    import none;
    export where (ASN,800) ~ bgp_community;
  };
}

protocol bgp RIPE_RISv6 {
  local as ASN;
  neighbor 2001:67c:2e8:2:ffff:0:4:28 as 12654;
  multihop 255;
  ipv6 {
    import none;
    export where (ASN,800) ~ bgp_community;
  };
}

protocol bgp NLNOG_LGv4 {
  local as ASN;
  neighbor 82.94.230.130 as 199036;
  multihop 255;
  ipv4 {
    import none;
    export where (ASN,800) ~ bgp_community;
  };
}

protocol bgp NLNOG_LGv6 {
  local as ASN;
  neighbor 2001:888:2001::130 as 199036;
  multihop 255;
  ipv6 {
    import none;
    export where (ASN,800) ~ bgp_community;
  };
}

protocol bgp HE_RTBGPv4 {
  local as ASN;
  neighbor 64.62.153.100 as 393338;
  multihop 255;
  ipv4 {
    import none;
    export where (ASN,800) ~ bgp_community;
  };
}

protocol bgp HE_RTBGPv6 {
  local as ASN;
  neighbor 2001:470:0:441::50 as 393338;
  multihop 255;
  ipv6 {
    import none;
    export where (ASN,800) ~ bgp_community;
  };
}

protocol bgp FMT_CORE {
  local as ASN;
  neighbor 23.141.112.1 as 34553;
  multihop 255;
  ipv4 {
    add paths;
    import all;
    export none;
  };
  ipv6 {
    add paths;
    import all;
    export none;
  };
}

protocol bgp PDX_CORE {
  local as ASN;
  neighbor 44.26.163.1 as 34553;
  multihop 255;
  ipv4 {
    add paths;
    import all;
    export none;
  };
  ipv6 {
    add paths;
    import all;
    export none;
  };
}

protocol bgp EXT_JEFFCOLO {
  local as ASN;
  neighbor 23.175.1.50 as 395502;
  multihop 255;
  ipv4 {
    import where external_import();
    export none;
  };
  ipv6 {
    import where external_import();
    export none;
  };
}

template bgp collector_peer {
  local as ASN;

  ipv4 {
    add paths;
    import filter {
        bgp_community.add((ASN,800));
        accept;
    };
    export none;
  };

  ipv6 {
    add paths;
    import filter {
        bgp_community.add((ASN,800));
        accept;
    };
    export none;
  };
}


# Nodes

{% for node in nodes %}
protocol bgp {{ node.upper() }} from collector_peer {
  neighbor {{ nodes[node] }} as ASN;
}
{% endfor %}

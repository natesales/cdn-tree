- name: Install
  hosts: nodes
  tasks:
    - name: Include vars
      include_vars: /home/nate/backend/config.yml

    # Packages

    - name: Add debian sid repo
      apt_repository:
        repo: deb http://deb.debian.org/debian/ sid main
        state: present

    - name: Set default release
      copy:
        content: APT::Default-Release "stable";
        dest: /etc/apt/apt.conf.d/default-release

    - name: Install rsync, bind9, dnsutils, ufw, unbound, bsdmainutils
      apt:
        update_cache: yes
        pkg:
          - rsync
          - bind9
          - curl
          - dnsutils
          - ufw
          - bsdmainutils

    - name: Install BIRD2 from sid
      apt:
        name: bird2
        default_release: sid

    - name: Check if GoRTR is installed
      command: dpkg-query -W gortr
      register: gortr_installed
      failed_when: gortr_installed.rc > 1
      changed_when: gortr_installed.rc == 1

    - name: Get GoRTR package
      get_url:
        url: https://github.com/cloudflare/gortr/releases/download/v0.14.6/gortr_0.14.6_amd64.deb
        dest: /root/gortr.deb
      when: gortr_installed.rc == 1

    - name: Install GoRTR
      apt:
        deb: /root/gortr.deb
      when: gortr_installed.rc == 1

    - name: Start GoRTR
      systemd:
        name: gortr
        state: started
        enabled: yes

    - name: Reload RPKI protocol
      shell: birdc reload rpki1
      when: gortr_installed.rc == 1

    # Network

    - name: Create network config
      template:
        src: network.sh.j2
        dest: /root/network.sh
        mode: +x
      register: network_config

    - name: Apply network config
      shell: bash /root/network.sh
      when: network_config.changed

    - name: Set hosts file
      copy:
        content: |
          127.0.0.1	localhost {{ inventory_hostname }}
          ::1     localhost ip6-localhost ip6-loopback
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters
        dest: /etc/hosts

    - name: Check hostname
      shell: hostname
      register: node_hostname
      changed_when: False

    - name: Set persistent hostname
      shell: hostnamectl set-hostname "{{ inventory_hostname }}"
      when: node_hostname.stdout != inventory_hostname

    - name: Setup UFW
      copy:
        content: |
          #!/bin/bash
          ufw disable
          echo "y" | ufw reset
          {% if http %}
          ufw allow 80
          ufw allow 443
          {% endif %}
          ufw allow 53
          ufw allow 179
          {% for host in allowed_hosts %}
          ufw allow from {{ host }}
          {% endfor %}
          echo "y" | ufw enable
        dest: /root/ufw.sh
        mode: +x
      register: ufw_config

    - name: Apply ufw config
      shell: bash /root/ufw.sh
      when: ufw_config.changed

    # Cache nodes

    - name: Add caddy repo
      apt_repository:
        repo: deb [trusted=yes] https://apt.fury.io/caddy/ /
      when: http

    - name: Add natesales repo
      apt_repository:
        repo: deb [trusted=yes] https://apt.fury.io/natesales/ /
      when: http

    - name: Install varnish, caddy, bcg, bgpq4 on HTTP nodes
      apt:
        pkg:
          - varnish
          - caddy
          - bcg
          - bgpq4
      when: http

    - name: Copy varnish service
      template:
        src: varnish.service.j2
        dest: /lib/systemd/system/varnish.service
      register: varnish_config
      when: http

    - name: Restart varnishd
      systemd:
        daemon_reload: yes
        name: varnish
        state: restarted
      when: varnish_config.changed and http

    - name: Check if varnish_exporter exists
      stat:
        path: /usr/bin/varnish_exporter
      register: varnish_exporter_stat
      when: http

    - name: Get varnish_exporter
      unarchive:
        src: https://github.com/jonnenauha/prometheus_varnish_exporter/releases/download/1.5.2/prometheus_varnish_exporter-1.5.2.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
      when: http and not varnish_exporter_stat.stat.exists

    - name: Move bind_exporter to path
      command: mv /tmp/prometheus_varnish_exporter-1.5.2.linux-amd64/prometheus_varnish_exporter /usr/bin/varnish_exporter
      when: http and not varnish_exporter_stat.stat.exists

    - name: Create varnish_exporter service
      copy:
        content: |
          [Unit]
          Description=Varnish Exporter
          After=network.target

          [Service]
          User=root
          Group=root
          Type=simple
          ExecStart=/usr/bin/varnish_exporter -web.listen-address="{{ ansible_host }}:9131"

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/varnish-exporter.service
      when: http and not varnish_exporter_stat.stat.exists

    - name: Enable and start varnish_exporter
      systemd:
        name: varnish-exporter
        enabled: yes
        state: restarted
      when: http and not varnish_exporter_stat.stat.exists

    - name: Copy cert update script
      copy:
        content: |
          #!/bin/bash
          cd /etc/caddy/
          tar -xvzf certs.tar.gz
          rm -rf *.pem
          mv tmp/certs/* .
          chown -R caddy:caddy *.pem
          caddy reload -config /etc/caddy/Caddyfile
          rm -rf tmp/
          rm -rf certs.tar.gz
        dest: /root/update-certs.sh
      when: http

    # BIND

    - name: Create unique BIND config
      template:
        src: named.conf.options.j2
        dest: /etc/bind/named.conf.options
      register: bind_config

    - name: Remove default zones
      file:
        path: /etc/bind/named.conf.default-zones
        state: absent

    - name: Copy named.conf
      copy:
        content: |
          include "/etc/bind/named.conf.options";
          include "/etc/bind/named.conf.local";
        dest: /etc/bind/named.conf

    - name: Create zone cleanup script
      copy:
        content: |
          #!/bin/bash
          for zone in $(ls /etc/bind/db.*); do
          	if ! [[ -n $(grep \"$zone\" /etc/bind/named.conf.local) ]]; then
          		echo "$zone"
          		rm "$zone"
          	fi
          done
        dest: /root/cleanup-zones.sh
        mode: +x

    - name: Reload BIND config
      shell: rndc reload
      when: bind_config.changed

    # BIND Exporter

    - name: Check if bind_exporter exists
      stat:
        path: /usr/bin/bind_exporter
      register: bind_exporter_stat

    - name: Get bind_exporter
      unarchive:
        src: https://github.com/prometheus-community/bind_exporter/releases/download/v0.3.0/bind_exporter-0.3.0.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
      when: not bind_exporter_stat.stat.exists

    - name: Move bind_exporter to path
      command: mv /tmp/bind_exporter-0.3.0.linux-amd64/bind_exporter /usr/bin/
      when: not bind_exporter_stat.stat.exists

    - name: Create bind_exporter service
      copy:
        content: |
          [Unit]
          Description=BIND Exporter
          After=network.target

          [Service]
          User=root
          Group=root
          Type=simple
          ExecStart=/usr/bin/bind_exporter -web.listen-address="{{ ansible_host }}:9119"

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/bind-exporter.service
      register: bind_exporter
      when: not bind_exporter_stat.stat.exists

    - name: Enable and start bind_exporter
      systemd:
        name: bind-exporter
        enabled: yes
        state: restarted
      when: bind_exporter.changed

    # Node exporter

    - name: Check if node_exporter exists
      stat:
        path: /usr/bin/node_exporter
      register: node_exporter_stat

    - name: Get node_exporter
      unarchive:
        src: https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
      when: not node_exporter_stat.stat.exists

    - name: Move node_exporter to path
      command: mv /tmp/node_exporter-1.0.1.linux-amd64/node_exporter /usr/bin/node_exporter
      when: not node_exporter_stat.stat.exists

    - name: Create node_exporter service
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=root
          Group=root
          Type=simple
          ExecStart=/usr/bin/node_exporter --web.listen-address="{{ ansible_host }}:9100"

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node-exporter.service
      register: node_exporter
      when: not node_exporter_stat.stat.exists

    - name: Enable and start node_exporter
      systemd:
        name: node-exporter
        enabled: yes
        state: restarted
      when: node_exporter.changed

    # BIRD

    - name: Copy BIRD2 config
      template:
        src: bird.j2
        dest: /etc/bird/bird.conf
      vars:
        asn: 34553
      register: bird_config

    - name: Apply BIRD config
      shell: birdc config
      when: bird_config.changed

    # Util
    - name: Installing zsh and git
      apt: pkg=zsh,git state=latest
      register: installation

    - name: Check if .zshrc exists
      stat:
        path: ~/.zshrc
      register: dotzshrc

    - name: Check if .oh-my-zsh exists
      stat:
        path: ~/.oh-my-zsh
      register: stat_oh_my_zsh_result

    - name: Cloning oh-my-zsh
      git:
        repo: https://github.com/robbyrussell/oh-my-zsh
        dest: /root/.oh-my-zsh
      when: not stat_oh_my_zsh_result.stat.exists

    - name: Get autocompletion
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: /root/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      when: not stat_oh_my_zsh_result.stat.exists

    - name: Creating new ~/.zshrc
      copy:
        content: |
          export ZSH="/root/.oh-my-zsh"
          ZSH_THEME="af-magic"
          plugins=(git zsh-autosuggestions)
          source $ZSH/oh-my-zsh.sh
          alias b="birdc"
          alias bgpc="b conf"
          alias bgps="b s p | column -t"
          compinit
        dest: /root/.zshrc
      when: not dotzshrc.stat.exists

    - name: Get ZSH completion
      get_url:
        url: https://raw.githubusercontent.com/natesales/zsh-bird-completions/master/_birdc
        dest: /usr/share/zsh/functions/Completion/Linux/_birdc

    - name: Change shell to zsh
      user:
        name: root
        shell: /usr/bin/zsh

    # Configure unbound resolver
#    - name: Get DNS config
#      shell: dig . NS @161.97.219.84 > /etc/unbound/opennic.cache
#
#    - name: Copy unbound config
#      copy:
#        content: |
#          server:
#            directory: "/etc/unbound"
#            username: unbound
#            interface: {{ dns["resolver4"] }}
#            interface: {{ dns["resolver6"] }}
#            root-hints: "/etc/unbound/opennic.cache"
#            harden-dnssec-stripped: yes
#            access-control: 0.0.0.0/0 allow
#            access-control: ::/0 allow
#
#            hide-identity: yes
#            hide-version: yes
#            hide-trustanchor: yes
#            minimal-responses: yes
#            log-queries: no
#
#            ip-ratelimit: 20
#            ip-ratelimit-factor: 0
#            ratelimit: 1000
#
#          remote-control:
#            control-enable: yes
#            control-interface: 127.0.0.1
#        dest: /etc/unbound/unbound.conf
#      register: unbound_config
#
#    - name: Restart unbound
#      systemd:
#        name: unbound
#        enabled: yes
#        state: restarted
#      when: unbound_config.changed
